//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.1-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Expr.g4 by ANTLR 4.1-SNAPSHOT
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.1-SNAPSHOT")]
public partial class ExprLexer : Lexer {
	public const int
		T__5=1, T__4=2, T__3=3, T__2=4, T__1=5, T__0=6, NUMBER=7, WS=8;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] tokenNames = {
		"<INVALID>",
		"')'", "'+'", "'*'", "'-'", "'('", "'/'", "NUMBER", "WS"
	};
	public static readonly string[] ruleNames = {
		"T__5", "T__4", "T__3", "T__2", "T__1", "T__0", "NUMBER", "WS"
	};


	public ExprLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	public override string GrammarFileName { get { return "Expr.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override void Action(RuleContext _localctx, int ruleIndex, int actionIndex) {
		switch (ruleIndex) {
		case 7 : WS_action(_localctx, actionIndex); break;
		}
	}
	private void WS_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 0: Skip();  break;
		}
	}

	public static readonly string _serializedATN =
		"\x3\xB6D5\x5D61\xF22C\xAD89\x44D2\xDF97\x846A\xE419\x2\n+\b\x1\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x3\x2\x3\x2\x3\x3\x3\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3\x6\x3\x6\x3\a"+
		"\x3\a\x3\b\x6\b!\n\b\r\b\xE\b\"\x3\t\x6\t&\n\t\r\t\xE\t\'\x3\t\x3\t\x2"+
		"\x2\x2\n\x3\x2\x3\x1\x5\x2\x4\x1\a\x2\x5\x1\t\x2\x6\x1\v\x2\a\x1\r\x2"+
		"\b\x1\xF\x2\t\x1\x11\x2\n\x2\x3\x2\x4\x3\x2\x32;\x5\x2\v\f\xF\xF\"\","+
		"\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2"+
		"\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2"+
		"\x3\x13\x3\x2\x2\x2\x5\x15\x3\x2\x2\x2\a\x17\x3\x2\x2\x2\t\x19\x3\x2\x2"+
		"\x2\v\x1B\x3\x2\x2\x2\r\x1D\x3\x2\x2\x2\xF \x3\x2\x2\x2\x11%\x3\x2\x2"+
		"\x2\x13\x14\a+\x2\x2\x14\x4\x3\x2\x2\x2\x15\x16\a-\x2\x2\x16\x6\x3\x2"+
		"\x2\x2\x17\x18\a,\x2\x2\x18\b\x3\x2\x2\x2\x19\x1A\a/\x2\x2\x1A\n\x3\x2"+
		"\x2\x2\x1B\x1C\a*\x2\x2\x1C\f\x3\x2\x2\x2\x1D\x1E\a\x31\x2\x2\x1E\xE\x3"+
		"\x2\x2\x2\x1F!\t\x2\x2\x2 \x1F\x3\x2\x2\x2!\"\x3\x2\x2\x2\" \x3\x2\x2"+
		"\x2\"#\x3\x2\x2\x2#\x10\x3\x2\x2\x2$&\t\x3\x2\x2%$\x3\x2\x2\x2&\'\x3\x2"+
		"\x2\x2\'%\x3\x2\x2\x2\'(\x3\x2\x2\x2()\x3\x2\x2\x2)*\b\t\x2\x2*\x12\x3"+
		"\x2\x2\x2\x5\x2\"\'";
	public static readonly ATN _ATN =
		ATNSimulator.Deserialize(_serializedATN.ToCharArray());
}

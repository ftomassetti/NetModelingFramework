//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.1-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Expr.g4 by ANTLR 4.1-SNAPSHOT

using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IExprListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.1-SNAPSHOT")]
public partial class ExprBaseListener : IExprListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExprParser.Mult"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMult([NotNull] ExprParser.MultContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExprParser.Mult"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMult([NotNull] ExprParser.MultContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="ExprParser.Minus"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMinus([NotNull] ExprParser.MinusContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExprParser.Minus"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMinus([NotNull] ExprParser.MinusContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="ExprParser.root"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRoot([NotNull] ExprParser.RootContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExprParser.root"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRoot([NotNull] ExprParser.RootContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="ExprParser.Add"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAdd([NotNull] ExprParser.AddContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExprParser.Add"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAdd([NotNull] ExprParser.AddContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="ExprParser.Sub"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSub([NotNull] ExprParser.SubContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExprParser.Sub"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSub([NotNull] ExprParser.SubContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="ExprParser.Int"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterInt([NotNull] ExprParser.IntContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExprParser.Int"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitInt([NotNull] ExprParser.IntContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="ExprParser.Paren"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParen([NotNull] ExprParser.ParenContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExprParser.Paren"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParen([NotNull] ExprParser.ParenContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="ExprParser.Div"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDiv([NotNull] ExprParser.DivContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExprParser.Div"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDiv([NotNull] ExprParser.DivContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
